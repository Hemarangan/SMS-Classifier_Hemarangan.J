import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Sample data (you should replace this with your own dataset)
data = {'sms_text': ["Hello, how are you doing?", "Win a free iPad now!", "Meeting at 5 pm", "Claim your prize worth Rs 2 lakhs today!"]}
labels = {'label': [0, 1, 0, 1]}  # 0: not spam, 1: spam

df = pd.DataFrame(data)
df_labels = pd.DataFrame(labels)

# Concatenate text and labels
df = pd.concat([df, df_labels], axis=1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['sms_text'], df['label'], test_size=0.2, random_state=42)

# Vectorize the text data
vectorizer = CountVectorizer()
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

# Train a Naive Bayes classifier
classifier = MultinomialNB()
classifier.fit(X_train_vectorized, y_train)

# Make predictions on the test set
y_pred = classifier.predict(X_test_vectorized)

# Evaluate the classifier
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print(f"Confusion Matrix:\n{conf_matrix}")
print(f"Classification Report:\n{class_report}")
